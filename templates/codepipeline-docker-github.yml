AWSTemplateFormatVersion: "2010-09-09"
Description: "Builds docker images from a github repository"

Parameters:

  environment:
    Description: Development Envrionment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - qa
      - prod

  uniqueIdentifier:
    Type: String
    Description: "a unique organization identifier. This will be the prefix for the created resources."
    Default: "nelsone"

  applicationName:
    Type: String
    Description: "the name of the application that the pipeline builds. The unique identifier will be added as a prefix."

  vpcId:
    Type: AWS::EC2::VPC::Id

  subnets:
    Type: AWS::EC2::Subnet::Id

  securityGroupIds:
    Type: AWS::EC2::SecurityGroup::Id

  gitHubOwner:
    Type: String
    Default: "alexnelsone"

  repositoryName:
    Type: String

  branchName:
    Type: String

  gitHubSecret:
    Type: String
    NoEcho: true

  gitHubOAuthToken:
    Type: String
    Description: "This comes from github. If you have a service account in github for this build, it will be the oauth token associated with that account."
    NoEcho: true

  buildProjectImage:
    Type: String
    Default: "aws/codebuild/docker:17.09.0"
    AllowedValues:
      - "aws/codebuild/standard:2.0"
      - "aws/codebuild/docker:17.09.0"
      - "aws/codebuild/python:2.7.12"


  buildSpecFileName:
    Type: String
    Default: "buildspec-docker-simple.yaml"
    Description: "the name of the buildspec file for the build project to execute."

  codebuildProjectLogBucket:
    Type: 'String'

  codebuildProjectCacheBucket:
    Type: 'String'

  stackNumber:
    Type: 'String'
    Description: "if you are creating more than one stack with the same resources"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Information"
        Parameters:
          - environment
          - uniqueIdentifier
          - applicationName
      - Label:
          default: "Github information"
        Parameters:
          - gitHubSecret
          - gitHubOAuthToken
      - Label:
          default: "CodeBuild Project Information"
        Parameters:
          - buildSpecFileName
      - Label:
          default: "Network Information"
        Parameters:
          - vpcId
          - subnets
          - securityGroupIds
    ParameterLabels:
      environment:
        default: "Development environment for this template"
      uniqueIdentifier:
        default: "Unique Identifier"
      applicationName:
        default: "Application Name"
      vpcId:
        default: "Select VPC"
      subnets:
        default: "Subnets"
      securityGroupIds:
        default: "Security Groups"
      GitHubSecret:
        default: "github secret"
      GitHubOAuthToken:
        default: "github oauth token"
      buildSpecFileName:
        default: "buildspec filename"
  Author:
    Description: 'Alex Nelson <nelsone@nelsone.io>'

Resources:
  codepipelineSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${uniqueIdentifier}-${environment}-${applicationName}-stack-${stackNumber}-container-pipeline-alerts
      TopicName: !Sub ${uniqueIdentifier}-${environment}-${applicationName}-stack-${stackNumber}-container-pipeline-alerts

  codePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref applicationName, "pipeline-service-role" ]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref applicationName, "pipeline-service-role-policy" ]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceAttribute'
                  - 'ec2:DescribeInstanceAttributes'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeIamInstanceProfileAssociations'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeImages'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:StartInstances'
                  - 'ec2:RunInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:RebootInstances'
                  - 'ec2:TerminateInstances'
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                  - 'ec2:*'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:DeleteItem"
                  - "ssm:GetParameters"
                Resource: '*'

  codeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Join ['-', [!Ref uniqueIdentifier, !Ref applicationName, "codebuild", !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
      Description: !Sub 'codebuild project for ${applicationName} docker images.'
      ServiceRole: !Ref codePipelineServiceRole
      TimeoutInMinutes: 5
      QueuedTimeoutInMinutes: 5
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref buildSpecFileName
      LogsConfig:
        S3Logs:
          EncryptionDisabled: false
          Location: !Sub ${codebuildProjectLogBucket}/build_output
          Status: ENABLED
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref buildProjectImage
        PrivilegedMode: true
      Cache:
        Location: !Join [ "", [ !Ref codebuildProjectCacheBucket, "/cache/", !Ref applicationName ]]
        Modes:
          - LOCAL_SOURCE_CACHE
        Type: S3
      VpcConfig:
        VpcId: !Ref vpcId
        Subnets:
          - !Ref subnets
        SecurityGroupIds:
          - !Ref securityGroupIds
      Tags:
        - Key: uniqueIdentifier
          Value: !Ref uniqueIdentifier
        - Key: application
          Value: !Ref applicationName


  applicationPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub ${uniqueIdentifier}-${applicationName}-pipeline
      RoleArn: !GetAtt codePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Ref codebuildProjectCacheBucket
        Type: S3
#        EncryptionKey:
#          Id: TODO
#          Type: KMS
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              Namespace: SourceVariables
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref gitHubOwner
                Repo: !Ref repositoryName
                Branch: !Ref branchName
                OAuthToken: !Ref gitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: !Sub ${uniqueIdentifier}-${applicationName}-Pipeline
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Join ['-', [!Ref uniqueIdentifier, !Ref applicationName, "codebuild", !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: templateSource
              RunOrder: 3


  containerRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref environment , !Ref applicationName, "container-repository" ]]
      #      the reason the role is the only one with the access is so that we test just an automated process putting
      #      containers into repository
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt codePipelineServiceRole.Arn
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
          - |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Only keep untagged images for 7 days",
                  "selection": {
                    "tagStatus": "untagged",
                    "countType": "sinceImagePushed",
                    "countUnit": "days",
                    "countNumber": 7
                  },
                  "action": { "type": "expire" }
                },
                {
                  "rulePriority": 2,
                  "description": "Keep only 10 tagged images, expire all others",
                  "selection": {
                    "tagStatus": "tagged",
                    "tagPrefixList": [ "dev" ],
                    "countType": "imageCountMoreThan",
                    "countNumber": 10
                  },
                  "action": { "type": "expire" }
                }
              ]
            }
          - environment: !Ref environment


  githubWebHook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref gitHubSecret
      Filters:
        - JsonPath: $.ref
          MatchEquals: "refs/heads/${Branch}"
      TargetPipeline: !Ref applicationPipeline
      TargetAction: SourceAction
      Name: !Join ["-", [ !Ref uniqueIdentifier, !Ref environment, !Ref applicationName, !Ref "AWS::Region"]]
      TargetPipelineVersion: !GetAtt
        - applicationPipeline
        - Version
      RegisterWithThirdParty: true


Outputs:
  codePipelineServiceRole:
    Description: Role used for Pipeline
    Value: !GetAtt codePipelineServiceRole.Arn
    Export:
      Name: !Sub "${uniqueIdentifier}-${applicationName}-docker-pipeline-role"