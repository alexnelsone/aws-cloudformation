AWSTemplateFormatVersion: 2010-09-09
Description:  Template for a cloudtrail trail

# TODO: Make Cloudwatch logging optional

Parameters:
  pEnvironment:
    Description: 'the environment the resource is being created in'
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'prod'

  pOrgIdentifier:
    Description: 'Organizational identifier to use for resources.  Will be used as prefix.'
    Type: String
    Default: uniqueId

  pApplicationIdentifer:
    Description: 'Unique application identifier. Used with the organization identifier to create a unique id for resources.'
    Type: String
    Default: uniqueId

  pLogGroupRetentionInDays:
    Description: 'The number of days to retain cloudwatch logs for this trail'
    Type: String
    Default: 7
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  pConfigureCloudwatchLogging:
    Description: 'Configure trail to log to cloudwatch?'
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

Conditions:
  cConfigureCloudWatchLogging: !Equals [ !Ref pConfigureCloudwatchLogging, 'true' ]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Organizational Details'
        Parameters:
          - pEnvironment
          - pOrgIdentifier
          - pApplicationIdentifer


Resources:

  rCloudTrailManagedKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join ["/", ["alias", !Join ["-", [!Ref pOrgIdentifier, !Ref pEnvironment, "cloudtrail-cmk", !Select [ "4", !Split [ "-", !Select [ "2", !Split [ "/", !Ref "AWS::StackId" ]]]]]]]]
      TargetKeyId: !Ref rCloudTrailManagedKey

  rCloudTrailManagedKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Key to encrypt EKS secrets
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Join ["-", [!Ref pOrgIdentifier, !Ref pEnvironment, "cmk", !Select [ "4", !Split [ "-", !Select [ "2", !Split [ "/", !Ref "AWS::StackId" ]]]]]]
        Statement:
          - Sid: Allow Administration of Key
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow use of Key
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:ReEncrypt'
              - 'kms:GenerateDataKey'
              - 'kms:DescribeKey'
            Resource: '*'

  rCloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub ${pOrgIdentifier}-${pApplicationIdentifer}-cloudtrail-logs-${AWS::AccountId}
      RetentionInDays: !Ref pLogGroupRetentionInDays

  rCloudWatchLogsStream:
    Condition: cConfigureCloudWatchLogging
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Ref rCloudWatchLogsGroup
      LogStreamName: !Sub CloudTrail_${AWS::AccountId}

  rCloudTrailPolicy:
    Condition: cConfigureCloudWatchLogging
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub ${pOrgIdentifier}-${pApplicationIdentifer}-cloudtrail-cloudwatch-policy
      Description: 'policy for cloudtrail to create cloudwatch logs and put events'
      Path: "/"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - "Sid": 'AllowAWSCloudTrailCreateLogStream'
            "Effect": Allow
            "Resource": !GetAtt rCloudWatchLogsGroup.Arn
            "Action":
              - 'logs:CreateLogStream'
          - "Sid": 'AllowAWSCloudTrailPutLogEvents'
            "Effect": Allow
            "Resource": !GetAtt rCloudWatchLogsGroup.Arn
            "Action":
              - 'logs:PutLogEvents'


  rCloudTrailBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join [ "-", [!Ref pEnvironment, !Ref pOrgIdentifier, 'cloudtrail', !Ref 'AWS::Region' ]]

  rCloudTrailBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref rCloudTrailBucket
      PolicyDocument:
        Id: !Join [ '-', [ !Ref pOrgIdentifier, 'cloudtrail-s3-policy']]
        Version: '2012-10-17'
        Statement:
          #        We will uncomment this when we want to block to a specific subnet
          - Sid: 'AWSCloudTrailAclCheck'
            Effect: 'Allow'
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 's3:GetBucketAcl'
            Resource:
              - !Sub arn:aws:s3:::${rCloudTrailBucket}
          - Sid: 'AWSCloudTrailWrite'
            Effect: 'Allow'
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 's3:PutObject'
            Resource:
              - !Sub arn:aws:s3:::${rCloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  rCloudTrailGroupRole:
     Type: 'AWS::IAM::Role'
     Properties:
       AssumeRolePolicyDocument:
         Version: '2012-10-17'
         Statement:
           - Effect: 'Allow'
             Principal:
               Service: 'cloudtrail.amazonaws.com'
             Action: 'sts:AssumeRole'
       Policies:
         - PolicyName: !Sub ${pOrgIdentifier}-${pApplicationIdentifer}-cloudtrail-cloudwatch-policy
           PolicyDocument:
             Version: '2012-10-17'
             Statement:
               - Effect: 'Allow'
                 Action:
                   - 'logs:CreateLogStream'
                   - 'logs:PutLogEvents'
                 Resource: !GetAtt rCloudWatchLogsGroup.Arn

  rCloudTrail:
    DependsOn:
      - rCloudTrailBucketPolicy
      - rCloudTrailManagedKeyAlias
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      TrailName: !Sub ${pOrgIdentifier}-${pApplicationIdentifer}-cloudtrail-trail
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      KMSKeyId: !Ref rCloudTrailManagedKey
      S3BucketName: !Ref rCloudTrailBucket
      IsLogging: true
      CloudWatchLogsLogGroupArn: !If [cConfigureCloudWatchLogging, !GetAtt rCloudWatchLogsGroup.Arn, !Ref 'AWS::NoValue']
      CloudWatchLogsRoleArn: !If [cConfigureCloudWatchLogging, !GetAtt rCloudTrailGroupRole.Arn, !Ref 'AWS::NoValue']