AWSTemplateFormatVersion: 2010-09-09
Description: build out of ec2 instance

Parameters:
  
  environment:
    Description: Development Envrionment Name
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - stage
    - qa
    - prod
    
  uniqueIdentifier:
    Description: A unique identifier to associate who this pipeline is for
    Type: String
    Default: uniqueId
    
  instanceType:
    Description: Set the instance Type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    
  keyPairName:
    Description: keypair to use for ec2 instance
    Type: AWS::EC2::KeyPair::KeyName
    
  amiId:
    Description: AMI to use for instance
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    
    
  disableAPITermination:
    Description: Whether or not to disable API Termination
    Type: String
    
  serverIdentifier:
    Description: Identifier to append to instance name
    Type: String
    
  vpcId:
    Description: VPC to build ec2 security group in 
    Type: AWS::EC2::VPC::Id
    Default: vpc-bbf2dadd
    
  subnetId:
    Description: Subnet to build ec2 instance in
    Type: AWS::EC2::Subnet::Id

    
Resources:

  iamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [!Ref environment, !Ref uniqueIdentifier, "InstanceProfile", !Select [ "4", !Split [ "-", !Select [ "2", !Split [ "/", !Ref "AWS::StackId" ]]]]]]
      Roles:
        - !Ref machineRole

  machineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref environment, !Ref uniqueIdentifier, !Select [ "4", !Split [ "-", !Select [ "2", !Split [ "/", !Ref "AWS::StackId" ]]]]]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: "ec2.amazonaws.com"}
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeCommitReadOnly'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Path: /
      Policies:
        - PolicyName: !Sub ${uniqueIdentifier}-machine-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:GetBucketLocation','s3:ListAllMyBuckets']
                Resource: 'arn:aws:s3:::*'
              - Effect: Allow
                Action: ['s3:GetObject', 's3:GetObjectTagging', 's3:GetObjectVersion']
                Resource:
                  - 'arn:aws:s3:::dev-*'
                  - 'arn:aws:s3:::dev-dev*/*'
              - Effect: Allow
                Action: ['ec2:CreateImage','ec2:CreateTags']
                Resource: '*'
              - Effect: Allow
                Action: ['autoscaling:CreateLaunchConfiguration','autoscaling:UpdateAutoScalingGroup','autoscaling:CreateOrUpdateTags']
                Resource: '*'
              - Effect: Allow
                Action: ['cloudformation:DescribeStackResources']
                Resource: '*'

  ec2Instance:
    DependsOn: ec2InstanceSecurityGroup
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref amiId
      IamInstanceProfile: !Ref iamInstanceProfile
      KeyName: !Ref keyPairName
      DisableApiTermination: !Ref disableAPITermination
      InstanceType: !Ref instanceType
      SecurityGroupIds:
      - !Ref ec2InstanceSecurityGroup
      SubnetId: !Ref subnetId
      Tags:
      - Key: Name
        Value: !Join [ "-" , [ !Ref uniqueIdentifier, !Ref serverIdentifier ]]
      - Key: CostCenter
        Value: !Ref uniqueIdentifier
      UserData:
        Fn::Base64: 
       
          #!/bin/bash -xe
       
          yum isntall -y expect
          yum install -y jq
          yum update -y
        
        
  ec2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${uniqueIdentifier}-${serverIdentifier}-securityGroup
      GroupDescription: Security Group for EC2 instance
      VpcId: 
        # import value with sub not support with short firm
        Fn::ImportValue: 
          !Sub ${uniqueIdentifier}-vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: CostCenter
        Value: !Ref uniqueIdentifier
    
