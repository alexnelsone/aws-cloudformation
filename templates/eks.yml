AWSTemplateFormatVersion: 2010-09-09
Description: "Creates eks Cluster"

Parameters:
  environment:
    Description: Development Envrionment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - qa
      - prod

  uniqueIdentifier:
    Description: A unique identifier to associate who this pipeline is for
    Type: String
    Default: uniqueId

  applicationName:
    Description: application name this topic is for
    Type: String

  vpcId:
    Type: AWS::EC2::VPC::Id

  subnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "select two"

  securityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>

  nodeGroupInstanceType:
    Type: String
    Default: t3.medium

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Information"
        Parameters:
          - environment
          - uniqueIdentifier
          - applicationName
      - Label:
          default: "Network Information"
        Parameters:
          - vpcId
          - subnetId
          - securityGroupIds
    ParameterLabels:
      environment:
        default: Development environment for this template
      uniqueIdentifier:
        default: A unique Identifier to prefix the topic with
      applicationName:
        default: The name of the application or project that will use this topic


Resources:
  eksCluster:
    DependsOn: eksServiceRole
    Type: AWS::EKS::Cluster
    Properties:
      Name:  !Join [ "-", [ !Ref uniqueIdentifier, !Ref environment, !Ref applicationName, "eks-cluster" ]]
      Version: '1.16'
      RoleArn: !GetAtt eksServiceRole.Arn
      EncryptionConfig:
        - Provider:
            KeyArn: !GetAtt eksCustomManagedKey.Arn
          Resources:
            - secrets
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Select [0, !Ref securityGroupIds]
        SubnetIds:
          - !Select [0, !Ref subnetId]
          - !Select [1, !Ref subnetId]

  managedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref eksCluster
      DiskSize: 40
      InstanceTypes:
        - !Ref nodeGroupInstanceType
      NodegroupName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref environment, !Ref applicationName, "nodegroup" ]]
      NodeRole: !GetAtt NodeRole.Arn
      ScalingConfig:
        MinSize: 3
        MaxSize: 3
        DesiredSize: 3
      Subnets:
        - !Select [0, !Ref subnetId]
        - !Select [1, !Ref subnetId]

  NodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref environment, !Ref applicationName, "NodeInstanceRole" ]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  eksServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref environment, !Ref applicationName, "eks-service-role" ]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  eksCustomManagedKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${uniqueIdentifier}-${environment}-${applicationName}-cmk
      TargetKeyId: !Ref eksCustomManagedKey

  eksCustomManagedKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key to encrypt EKS secrets
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub ${uniqueIdentifier}-${environment}-${applicationName}-cmk
        Statement:
          - Sid: Allow Administration of Key
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow use of Key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt eksServiceRole.Arn
            Action:
              - kms:Decrypt
            Resource: "*"


Outputs:
  EksRoleArn:
    Description: EKS role for creating aws resources
    Value: !GetAtt eksServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"
