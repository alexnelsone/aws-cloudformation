AWSTemplateFormatVersion: 2010-09-09
Description: "pipeline for lambda deployment"


Parameters:
  environment:
    Description: Development Envrionment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - qa
      - prod

  uniqueIdentifier:
    Type: String
    Description: "A unique organization identifier (ie: nelsone). This will be the prefix for created resources."
    Default: nelsone

  applicationName:
    Type: String
    Description: "the name of the application that the pipeline builds. The unique identifier will be added as a prefix."


  codeBuildProjectName:
    Type: String
    Description: "the name to use for the codebuild project. The unique identifier will be added as a prefix."

  codeBuildProjectDescription:
    Type: String
    Description: "breif description to use for the codebuild project."

  vpcId:
    Type: AWS::EC2::VPC::Id

  subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "select two"

  securityGroupIds:
    Type: AWS::EC2::SecurityGroup::Id

  GitHubOwner:
    Type: String
    Default: alexnelsone

  RepositoryName:
    Type: String

  BranchName:
    Type: String


  GitHubOAuthToken:
    Type: String
    Description: "This comes from github. If you have a service account in github for this build, it will be the oauth token associated with that account."
    NoEcho: true


  buildProjectImage:
    Type: String
    Default: "aws/codebuild/standard:4.0"
    AllowedValues:
      - "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
      - "aws/codebuild/docker:17.09.0"
      - "aws/codebuild/python:2.7.12"
      - "aws/codebuild/standard:4.0"


  buildSpecFileName:
    Type: String
    Default: "buildspec-docker-simple.yaml"
    Description: "the name of the buildspec file for the build project to execute."

  stackNameToUpdate:
    Type: String
    Description: "the name of the lambda cloudformation stack"

  deploymentTemplateName:
    Type: String


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Information"
        Parameters:
          - environment
          - uniqueIdentifier
          - applicationName
      - Label:
          default: "Github information"
        Parameters:
          - GitHubOAuthToken
      - Label:
          default: "CodeBuild Project Information"
        Parameters:
          - codeBuildProjectName
          - codeBuildProjectDescription
          - buildSpecFileName
      - Label:
          default: "Network Information"
        Parameters:
          - vpcId
          - subnets
          - securityGroupIds
      - Label:
          default: "Lambda Information"
          Parameters:
            - stackNameToUpdate
            - deploymentTemplateName

    ParameterLabels:
      environment:
        default: "Development environment for this template"
      uniqueIdentifier:
        default: "Unique Identifier"
      applicationName:
        default: "Application Name"
      codeBuildProjectName:
        default: "The name of the CodeBuild project"
      codeBuildProjectDescription:
        default: "Description for the CodeBuild project"
      vpcId:
        default: "Select VPC"
      subnets:
        default: "Subnets"
      securityGroupIds:
        default: "Security Groups"
      GitHubOAuthToken:
        default: "github oauth token"
      buildSpecFileName:
        default: "buildspec filename"
      stackNameToUpdate:
        default: "the name of the lambda stack"
      deploymentTemplateName:
        default: "the name of the lambda deployment template"

Resources:
  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Ref codeBuildProjectName
      Description: !Ref codeBuildProjectDescription
      ServiceRole: !Ref CodePipelineServiceRole
      TimeoutInMinutes: 5
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref buildSpecFileName
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref buildProjectImage
      Cache:
        Type: NO_CACHE
      VpcConfig:
        VpcId: !Ref vpcId
        Subnets:
          - !Select [0, !Ref subnets]
          - !Select [1, !Ref subnets]
        SecurityGroupIds:
          - !Ref securityGroupIds


  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref applicationName, "pipeline-service-role" ]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - lambda.amazonaws.com
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref applicationName, "pipeline-service-role-policy" ]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                  - 'iam:CreateRole'
                  - 'iam:GetPolicy'
                  - 'iam:GetPolicyVersion'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:ListRolePolicies'
                  - 'iam:ListRoles'
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub arn:aws:s3:::${uniqueIdentifier}-${environment}-artifacts-store-us-east-1/*
              - Effect: Allow
                Action:
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource:
                  - '*'
#                  - !Sub arn:aws:logs:us-east-1:503217423561:log-group:/aws/codebuild/${codeBuildProjectName}:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                Resource:
                  - !Sub arn:aws:cloudformation:us-east-1:503217423561:stack/${stackNameToUpdate}/*


  githubWebHook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref ApplicationPipeline
      TargetAction: SourceAction
      Name: !Join [ "-", [ !Ref environment, !Ref uniqueIdentifier, !Ref applicationName, !Ref "AWS::Region" ]]
      TargetPipelineVersion: !GetAtt
        - ApplicationPipeline
        - Version
      RegisterWithThirdParty: true

  ApplicationPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub ${uniqueIdentifier}-${applicationName}-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Join [ "-", [!Ref uniqueIdentifier, !Ref environment, 'artifacts-store', !Ref "AWS::Region" ]]
        Type: S3
        EncryptionKey:
          Id: 8541ce08-77f9-41eb-b0e7-94eec2336a9f
          Type: KMS
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: !Sub ${uniqueIdentifier}-${applicationName}-Pipeline
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codeBuildProjectName
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: templateSource
              RunOrder: 2
        - Name: CreateChangeSet
          Actions:
            - Name: createChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub ${stackNameToUpdate}
                RoleArn: arn:aws:iam::503217423561:role/nelsone-lambdaAPI-lambda-deployment-service-role
                #              RoleArn: "arn:aws:iam::077375377515:role/test_pipeline_lambda"
                TemplatePath: !Join [ "", [ "templateSource::", !Ref deploymentTemplateName ]]
                ChangeSetName: !Join ["", [ !Ref stackNameToUpdate, "ChangeSet" ]]
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: templateSource
              RunOrder: 4
        #        - Name: Approval
        #          Actions:
        #          - Name: Approval
        #            ActionTypeId:
        #              Category: Approval
        #              Owner: AWS
        #              Provider: Manual
        #              Version: 1
        #            Configuration:
        #              CustomData: 'Do you want to execute a change set against the stack?'
        ##              NotificationArn: !Ref codepipelineSNS
        #            RunOrder: 5
        - Name: DeployChangeSet
          Actions:
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Join ["", [ !Ref stackNameToUpdate, "ChangeSet" ]]
                StackName: !Sub ${stackNameToUpdate}
              RunOrder: 6

#  lambdaDeploymentRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      RoleName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref applicationName, "lambda-deployment-service-role" ]]
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - cloudformation.amazonaws.com
#                - lambda.amazonaws.com
#                - codebuild.amazonaws.com
#            Action: 'sts:AssumeRole'
#      Path: /
#      Policies:
#        - PolicyName: !Join [ "-", [ !Ref uniqueIdentifier, !Ref applicationName, "lambda-deployment-service-role-policy" ]]
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 'cloudformation:*'
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - 'logs:*'
#                Resource:
#                  - 'arn:aws:logs:*:*:*'
#              - Effect: Allow
#                Action:
#                  - 's3:GetObject'
#                  - 's3:PutObject'
#                Resource:
#                  - 'arn:aws:s3:::*'
#              - Effect: Allow
#                Action:
#                  - iam:GetRole
#                  - iam:CreateRole
#                  - iam:DeleteRole
#                  - iam:PutRolePolicy
#                  - iam:AttachRolePolicy
#                  - iam:DeleteRolePolicy
#                  - iam:DetachRolePolicy
#                  - iam:PassRole
#                  - iam:GetRolePolicy
#                Resource:
#                  - '*'
#              - Effect: Allow
#                Action:
#                  - lambda:GetFunction
#                  - lambda:CreateFunction
#                  - lambda:UpdateFunctionCode
#                  - lambda:DeleteFunction
#                  - lambda:GetFunctionConfiguration
#                  - lambda:ListTags
#                  - lambda:TagResource
#                  - lambda:UntagResource
#                  - lambda:AddPermission
#                  - lambda:UpdateFunctionConfiguration
#                  - lambda:RemovePermission
#                Resource:
#                  - '*'
#              - Effect: Allow
#                Action:
#                  - events:DescribeRule
#                  - events:PutRule
#                  - events:RemoveTargets
#                  - events:PutTargets
#                  - events:DeleteRule
#                Resource:
#                  - '*'


Outputs:
  CodePipelineServiceRole:
    Description: Role used for Pipeline
    Value: !GetAtt CodePipelineServiceRole.Arn
    Export:
      Name: !Sub "${uniqueIdentifier}-${applicationName}-pipeline-role-name"