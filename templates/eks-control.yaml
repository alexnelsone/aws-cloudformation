AWSTemplateFormatVersion: 2010-09-09
Description: "Creates eks Cluster Control Plane"

Parameters:
  environment:
    Description: Development Envrionment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - qa
      - prod

  uniqueIdentifier:
    Description: A unique identifier to associate who this pipeline is for
    Type: String
    Default: uniqueId

  vpcId:
    Type: AWS::EC2::VPC::Id

  subnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "select two"

  kubernetesVersion:
    Type: String
    Default: 1.17


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Information"
        Parameters:
          - environment
          - uniqueIdentifier
      - Label:
          default: "Control Plane Network Information"
        Parameters:
          - vpcId
          - subnetId
          - kubernetesVersion
    ParameterLabels:
      environment:
        default: Development environment for this template
      uniqueIdentifier:
        default: A unique Identifier to prefix the topic with
      kubernetesVersion:
        default: The version of kubernetes to install


Resources:
  eksControlPlane:
    DependsOn: eksServiceRole
    Type: AWS::EKS::Cluster
    Properties:
      Name:  !Join [ "-", [ !Ref uniqueIdentifier, !Ref environment, "eks-cluster" ]]
      Version: !Ref kubernetesVersion
      RoleArn: !GetAtt eksServiceRole.Arn
      EncryptionConfig:
        - Provider:
            KeyArn: !GetAtt eksCustomManagedKey.Arn
          Resources:
            - secrets
      ResourcesVpcConfig:
        SubnetIds:
          - !Select [0, !Ref subnetId]
          - !Select [1, !Ref subnetId]



  eksServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${uniqueIdentifier}-${environment}-eks-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  eksCustomManagedKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${uniqueIdentifier}-${environment}-cmk
      TargetKeyId: !Ref eksCustomManagedKey

  eksCustomManagedKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key to encrypt EKS secrets
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub ${uniqueIdentifier}-${environment}-cmk
        Statement:
          - Sid: Allow Administration of Key
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow use of Key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt eksServiceRole.Arn
            Action:
              - kms:Decrypt
            Resource: "*"

  eksControlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${uniqueIdentifier}-${environment}-eksControl-sg
      GroupDescription: Security Group for EC2 instance
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.0.0.0/0
      Tags:
        - Key: environment
          Value: !Ref environment


  eksAlbServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${uniqueIdentifier}-${environment}-eks-albIngressController-role
      ManagedPolicyArns:
        - !Ref eksALBIngressControllerPolicy
      Path: /eks-service-role/
      AssumeRolePolicyDocument:
        Fn::Sub:
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::${aws_account}:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/5568D28330102AB96FF2E496687DBB83"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "oidc.eks.us-east-1.amazonaws.com/id/5568D28330102AB96FF2E496687DBB83:sub": "system:serviceaccount:kube-system:alb_service_account"
                    }
                  }
                }
              ]
            }
          - aws_account: !Sub ${AWS::AccountId}



  eksALBIngressControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${uniqueIdentifier}-${environment}-eks-albIngressController-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'acm:DescribeCertificate'
              - 'acm:ListCertificates'
              - 'acm:GetCertificate'
            Resource: '*'
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddListenerCertificates
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateRule
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:DeleteRule
              - elasticloadbalancing:DeleteTargetGroup
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeListenerCertificates
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DescribeRules
              - elasticloadbalancing:DescribeSSLPolicies
              - elasticloadbalancing:DescribeTags
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetGroupAttributes
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:ModifyRule
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:ModifyTargetGroupAttributes
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:RemoveListenerCertificates
              - elasticloadbalancing:RemoveTags
              - elasticloadbalancing:SetIpAddressType
              - elasticloadbalancing:SetSecurityGroups
              - elasticloadbalancing:SetSubnets
              - elasticloadbalancing:SetWebAcl
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:AuthorizedSecurityGroupIngress
              - ec2:CreateSecurityGroup
              - ec2:CreateTags,
              - ec2:DeleteTags,
              - ec2:DeleteSecurityGroup,
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAddresses
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:DescribeInternetGateways
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeTags
              - ec2:DescribeVpcs
              - ec2:ModifyInstanceAttribute
              - ec2:ModifyNetworkInterfaceAttribute
              - ec2:RevokeSecurityGroupIngress
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
              - iam:GetServerCertificate
              - iam:ListServerCertificates
            Resource: '*'
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource: '*'
          - Effect: Allow
            Action:
              - waf-regional:GetWebACLForResource
              - "waf-regional:GetWebACL"
              - "waf-regional:AssociateWebACL"
              - "waf-regional:DisassociateWebACL"
            Resource: '*'
          - Effect: Allow
            Action:
              - "tag:GetResources"
              - "tag:TagResources"
            Resource: '*'
          - Effect: Allow
            Action:
              - waf:GetWebACL
            Resource: '*'
          - Effect: Allow
            Action:
              - "wafv2:GetWebACL"
              - "wafv2:GetWebACLForResource"
              - "wafv2:AssociateWebACL"
              - "wafv2:DisassociateWebACL"
            Resource: '*'
          - Effect: Allow
            Action:
              - "shield:DescribeProtection"
              - "shield:GetSubscriptionState"
              - "shield:DeleteProtection"
              - "shield:CreateProtection"
              - "shield:DescribeSubscription"
              - "shield:ListProtections"
            Resource: '*'







Outputs:
  EksRoleArn:
    Description: EKS role for creating aws resources
    Value: !GetAtt eksServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"
