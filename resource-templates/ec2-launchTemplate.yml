AWSTemplateFormatVersion: 2010-09-09
Description: 'EC2 Laumch Template'


Parameters:
  environment:
    Description: Development Envrionment Name
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'qa'
      - 'prod'

  uniqueIdentifier:
    Type: String
    Description: 'a unique organization identifier. This will be the prefix for the created resources.'

  applicationName:
    Type: String
    Description: 'the name of the application that the pipeline builds. the unique identifier will be added as a prefix'

  keyName:
    Description: 'Name of existing ec2 keypair'
    Type: AWS::EC2::KeyPair::KeyName

  instanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

  imageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  ebsVolumeSize:
    Type: 'String'
    Default: 10

  ebsVolumeType:
    Type: 'String'
    Default: 'gp2'
    AllowedValues:
      - gp2
      - io1
      - sc1
      - st1
      - standard

  terminationProtection:
    Type: 'String'
    Default: false
    AllowedValues:
      - true
      - false

  detailedMonitoring:
    Type: 'String'
    Default: false
    AllowedValues:
      - true
      - false

  emailForNotifications:
    Type: 'String'

  vpcId:
    Type: 'AWS::EC2::VPC::Id'

  subnetId:
    Type: 'AWS::EC2::Subnet::Id'



Metadata:
  Author:
    Description: 'Alex Nelson <nelsone@nelsone.io>'
  AWS::Cloudformation::Interface:
    ParameterGroups:
      - Label:
          default: 'General Information'
        Parameters:
          - 'environment'
          - 'uniqueIdentifier'
          - 'applicationName'
      - Label:
          default: 'EC2 Information'
        Parameters:
            - 'instanceType'
            - 'keyName'
            - 'ebsVolumeSize'
            - 'ebsVolumeType'
      - Label:
          default: 'Notifications'
        Parameters:
            - 'emailForNotifications'
    ParameterLabels:
      environment:
        default: 'Development environment for this template'
      uniqueIdentifier:
        default: 'Unique Identifier'
      applicationName:
        default: 'Application Name'
      instanceType:
        default: 'Instance Type'
      keyName:
        default: 'KeyPair'
      emailForNotifications:
        default: 'Email for Notifications'

Resources:
  notificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: !Join ['-', [!Ref environment, !Ref uniqueIdentifier, 'notifier', !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
      Subscription:
        - Endpoint: !Ref 'emailForNotifications'
          Protocol: 'email'

  machineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [!Ref environment, !Ref uniqueIdentifier, !Ref applicationName, !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: 'ec2.amazonaws.com'}
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeCommitReadOnly'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Path: /
      Policies:
        - PolicyName: !Sub '${uniqueIdentifier}-machine-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:GetBucketLocation','s3:ListAllMyBuckets']
                Resource: 'arn:aws:s3:::*'
              - Effect: Allow
                Action: ['s3:GetObject', 's3:GetObjectTagging', 's3:GetObjectVersion']
                Resource:
                  - 'arn:aws:s3:::dev-*'
                  - 'arn:aws:s3:::dev-*/*'
              - Effect: Allow
                Action: ['ec2:CreateImage','ec2:CreateTags']
                Resource: '*'
              - Effect: Allow
                Action: ['autoscaling:CreateLaunchConfiguration','autoscaling:UpdateAutoScalingGroup','autoscaling:CreateOrUpdateTags']
                Resource: '*'
              - Effect: Allow
                Action: ['cloudformation:DescribeStackResources']
                Resource: '*'
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref environment, !Ref uniqueIdentifier, !Ref applicationName, 'role', !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
        - Key: environment
          Value: !Ref environment
        - Key: uniqueIdentifier
          Value: !Ref uniqueIdentifier
        - Key: application
          Value: !Ref applicationName

  iamInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join ['-', [!Ref uniqueIdentifier, !Ref environment, 'InstanceProfile', !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
      Roles:
        - !Ref machineRole

  stackSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ssh and http via load balancer only'
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.0.0.0/8'
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '10.0.0.0/8'
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '10.0.0.0/8'
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref environment, !Ref uniqueIdentifier, !Ref applicationName, 'security-group', !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
        - Key: environment
          Value: !Ref environment
        - Key: uniqueIdentifier
          Value: !Ref uniqueIdentifier
        - Key: application
          Value: !Ref applicationName


  ec2LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${uniqueIdentifier}-${environment}-launchTemplate'
      LaunchTemplateData:
        InstanceType: !Ref instanceType
        DisableApiTermination: !Ref terminationProtection
        InstanceInitiatedShutdownBehavior: terminate
        KeyName: !Ref keyName
        ImageId: !Ref imageId
        IamInstanceProfile:
          Arn: !GetAtt iamInstanceProfile.Arn
        Monitoring:
          Enabled: !Ref detailedMonitoring
        BlockDeviceMappings:
          - DeviceName: '/dev/xvda'
            Ebs:
              Encrypted: true
              VolumeSize: !Ref ebsVolumeSize
              DeleteOnTermination: true
              VolumeType: !Ref ebsVolumeType
        SecurityGroupIds:
          - !Ref stackSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Join ['-', [!Ref uniqueIdentifier, !Ref environment, !Ref applicationName, 'instance', !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
            - Key: environment
              Value: !Ref environment
            - Key: uniqueIdentifier
              Value: !Ref uniqueIdentifier
            - Key: application
              Value: !Ref applicationName
          - ResourceType: volume
            Tags:
            - Key: Name
              Value: !Join ['-', [!Ref uniqueIdentifier, !Ref environment, !Ref applicationName, 'volume', !Select [ '4', !Split [ '-', !Select [ '2', !Split [ '/', !Ref 'AWS::StackId' ]]]]]]
            - Key: environment
              Value: !Ref environment
            - Key: uniqueIdentifier
              Value: !Ref uniqueIdentifier
            - Key: application
              Value: !Ref applicationName
        UserData:
          Fn::Base64: !Sub |

            #!/bin/bash -xe

            EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
            EC2_REGION='`echo \'$EC2_AVAIL_ZONE\' | sed 's/[a-z]$//'`'
            EC2_INSTANCE_ID='`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`'

            yum update -y
            yum install -y ruby
            yum install -y wget

            cd /home/ec2-user
            wget https://aws-codedeploy-$EC2_REGION.s3.$EC2_REGION.amazonaws.com/latest/install

            chmod +x ./install
            ./install auto



Outputs:
  launchTemplate:
    Value:
      Ref: ec2LaunchTemplate